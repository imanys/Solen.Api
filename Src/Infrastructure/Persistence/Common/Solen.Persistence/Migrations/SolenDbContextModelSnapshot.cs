// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Solen.Persistence;

namespace Solen.Persistence.Migrations
{
    [DbContext(typeof(SolenDbContext))]
    partial class SolenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Solen.Core.Domain.Common.Entities.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.Property<string>("SubscriptionPlanId")
                        .IsRequired()
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<string>("CourseStatusName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("varchar(120) CHARACTER SET utf8mb4")
                        .HasMaxLength(120);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.CourseLearnedSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasMaxLength(127);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseLearnedSkill");
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.CourseResource", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<string>("ModuleId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<string>("LectureId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<string>("ResourceId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.HasKey("CourseId", "ModuleId", "LectureId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("CourseResources");
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.LearnerCompletedLecture", b =>
                {
                    b.Property<string>("LearnerId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<string>("LectureId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("LearnerId", "LectureId");

                    b.HasIndex("LectureId");

                    b.ToTable("LearnerCompletedLectures");
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.LearnerCourseAccessTime", b =>
                {
                    b.Property<string>("LearnerId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<string>("CourseId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("AccessDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("LearnerId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("LearnerCourseAccessTimes");
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.LearnerLectureAccessHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AccessDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LearnerId")
                        .IsRequired()
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<string>("LectureId")
                        .IsRequired()
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("LearnerId");

                    b.HasIndex("LectureId");

                    b.ToTable("LearnerLectureAccessHistories");
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.LearningPath", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("LearningPaths");
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.LearningPathCourse", b =>
                {
                    b.Property<string>("LearningPathId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<string>("CourseId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("LearningPathId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("LearningPathCourses");
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.Lecture", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LectureTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Lectures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Lecture");
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.Module", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Solen.Core.Domain.Identity.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            Description = "Has all controls and access.",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "Instructor",
                            Description = "Can create Learning Paths, create, publish and unpublish courses",
                            Name = "Instructor"
                        },
                        new
                        {
                            Id = "Learner",
                            Description = "Can access to all courses belonging to his learning path",
                            Name = "Learner"
                        });
                });

            modelBuilder.Entity("Solen.Core.Domain.Identity.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("InvitationToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InvitedBy")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("LearningPathId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("PasswordToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<string>("UserStatusName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LearningPathId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Solen.Core.Domain.Identity.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Solen.Core.Domain.Notifications.Entities.DisabledNotificationTemplate", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<string>("NotificationTemplateId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.HasKey("OrganizationId", "NotificationTemplateId");

                    b.HasIndex("NotificationTemplateId");

                    b.ToTable("DisabledNotificationTemplates");
                });

            modelBuilder.Entity("Solen.Core.Domain.Notifications.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<string>("Body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NotificationEvent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RecipientId")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Solen.Core.Domain.Notifications.Entities.NotificationTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<bool>("IsSystemNotification")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NotificationEventName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("TemplateBody")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TemplateSubject")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("TypeName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NotificationTemplates");

                    b.HasData(
                        new
                        {
                            Id = "CoursePublishedEvent-Email",
                            IsSystemNotification = false,
                            NotificationEventName = "CoursePublishedEvent",
                            TemplateBody = "Hi,<br/> <br/>The course «{{data.course_name}}» has just been published by {{data.creator_name}}.<br/> <br/>Enjoy your training course.<br/> <br/>",
                            TemplateSubject = "A course has been published !",
                            TypeName = "Email"
                        },
                        new
                        {
                            Id = "CoursePublishedEvent-Push",
                            IsSystemNotification = false,
                            NotificationEventName = "CoursePublishedEvent",
                            TemplateBody = "Hi,<br/> <br/>The course «{{data.course_name}}» has just been published by {{data.creator_name}}.<br/> <br/>Enjoy your training course.<br/> <br/>",
                            TemplateSubject = "A course has been published !",
                            TypeName = "Push"
                        },
                        new
                        {
                            Id = "OrganizationSigningUpInitializedEvent-Email",
                            IsSystemNotification = true,
                            NotificationEventName = "OrganizationSigningUpInitializedEvent",
                            TemplateBody = "Hi,<br/> <br/>Please click on the link below to complete the signing up process :<br/> <br/>{{ data.link_to_complete_signing_up }}<br/> <br/>",
                            TemplateSubject = "Verify your email and complete your registration",
                            TypeName = "Email"
                        },
                        new
                        {
                            Id = "OrganizationSigningUpCompletedEvent-Email",
                            IsSystemNotification = true,
                            NotificationEventName = "OrganizationSigningUpCompletedEvent",
                            TemplateBody = "Hi {{data.user_name}},<br/> <br/>Thank you for your interest in Solen LMS.Your account has been successfully created.<br/>It’s great to have you here! We hope you and your learners will enjoy using this platform.<br/> <br/>",
                            TemplateSubject = "Welcome to Solen LMS!",
                            TypeName = "Email"
                        },
                        new
                        {
                            Id = "PasswordForgottenEvent-Email",
                            IsSystemNotification = true,
                            NotificationEventName = "PasswordForgottenEvent",
                            TemplateBody = "Hi,<br/> <br/>This is a system message in reply to your request to change your password.<br/>To reset your password, please open the link below and follow the instructions on the page : <br/> <br/>{{ data.link_to_reset_password }}<br/> <br/>",
                            TemplateSubject = "Reset Password",
                            TypeName = "Email"
                        },
                        new
                        {
                            Id = "UserSigningUpCompletedEvent-Email",
                            IsSystemNotification = true,
                            NotificationEventName = "UserSigningUpCompletedEvent",
                            TemplateBody = "Hi {{data.user_name}},<br/> <br/>Welcome to  Solen LMS ! Your account has been successfully created.<br/>Enjoy your learning journey !<br/> <br/>",
                            TemplateSubject = "Welcome to Solen LMS!",
                            TypeName = "Email"
                        },
                        new
                        {
                            Id = "UserSigningUpInitializedEvent-Email",
                            IsSystemNotification = true,
                            NotificationEventName = "UserSigningUpInitializedEvent",
                            TemplateBody = "Hi,<br/> <br/>{{data.invited_by}} has invited you to join Solen LMS.<br/>Please click on the link below to complete the signing up process :<br/> <br/>{{ data.link_to_complete_signing_up }}<br/> <br/>",
                            TemplateSubject = "{{data.invited_by}} has invited you to join Solen LMS",
                            TypeName = "Email"
                        });
                });

            modelBuilder.Entity("Solen.Core.Domain.Resources.Entities.AppResource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("OrganizationId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ResourceTypeName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<bool>("ToDelete")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AppResources");
                });

            modelBuilder.Entity("Solen.Core.Domain.Security.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<DateTime?>("ExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Solen.Core.Domain.Subscription.Entities.OrganizationSigningUp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("OrganizationSigningUps");
                });

            modelBuilder.Entity("Solen.Core.Domain.Subscription.Entities.SubscriptionPlan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<long>("MaxFileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxStorage")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            Id = "Free",
                            MaxFileSize = 314572800L,
                            MaxStorage = 5368709120L,
                            MaxUsers = 20,
                            Name = "Free Plan"
                        });
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.ArticleLecture", b =>
                {
                    b.HasBaseType("Solen.Core.Domain.Courses.Entities.Lecture");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("ArticleLecture");
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.VideoLecture", b =>
                {
                    b.HasBaseType("Solen.Core.Domain.Courses.Entities.Lecture");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("VideoLecture");
                });

            modelBuilder.Entity("Solen.Core.Domain.Common.Entities.Organization", b =>
                {
                    b.HasOne("Solen.Core.Domain.Subscription.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.Course", b =>
                {
                    b.HasOne("Solen.Core.Domain.Identity.Entities.User", "Creator")
                        .WithMany("CreatedCourses")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.CourseLearnedSkill", b =>
                {
                    b.HasOne("Solen.Core.Domain.Courses.Entities.Course", "Course")
                        .WithMany("CourseLearnedSkills")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.CourseResource", b =>
                {
                    b.HasOne("Solen.Core.Domain.Resources.Entities.AppResource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.LearnerCompletedLecture", b =>
                {
                    b.HasOne("Solen.Core.Domain.Identity.Entities.User", "Learner")
                        .WithMany("CompletedLectures")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Solen.Core.Domain.Courses.Entities.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.LearnerCourseAccessTime", b =>
                {
                    b.HasOne("Solen.Core.Domain.Courses.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Solen.Core.Domain.Identity.Entities.User", "Learner")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.LearnerLectureAccessHistory", b =>
                {
                    b.HasOne("Solen.Core.Domain.Identity.Entities.User", "Learner")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Solen.Core.Domain.Courses.Entities.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.LearningPath", b =>
                {
                    b.HasOne("Solen.Core.Domain.Common.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.LearningPathCourse", b =>
                {
                    b.HasOne("Solen.Core.Domain.Courses.Entities.Course", "Course")
                        .WithMany("CourseLearningPaths")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Solen.Core.Domain.Courses.Entities.LearningPath", "LearningPath")
                        .WithMany("LearningPathCourses")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.Lecture", b =>
                {
                    b.HasOne("Solen.Core.Domain.Courses.Entities.Module", "Module")
                        .WithMany("Lectures")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Courses.Entities.Module", b =>
                {
                    b.HasOne("Solen.Core.Domain.Courses.Entities.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Identity.Entities.User", b =>
                {
                    b.HasOne("Solen.Core.Domain.Courses.Entities.LearningPath", "LearningPath")
                        .WithMany("Learners")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Solen.Core.Domain.Common.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Identity.Entities.UserRole", b =>
                {
                    b.HasOne("Solen.Core.Domain.Identity.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Solen.Core.Domain.Identity.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Notifications.Entities.DisabledNotificationTemplate", b =>
                {
                    b.HasOne("Solen.Core.Domain.Notifications.Entities.NotificationTemplate", "NotificationTemplate")
                        .WithMany()
                        .HasForeignKey("NotificationTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Solen.Core.Domain.Common.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solen.Core.Domain.Notifications.Entities.Notification", b =>
                {
                    b.HasOne("Solen.Core.Domain.Identity.Entities.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Solen.Core.Domain.Security.Entities.RefreshToken", b =>
                {
                    b.HasOne("Solen.Core.Domain.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
